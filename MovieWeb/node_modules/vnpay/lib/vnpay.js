"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VNPay = void 0;
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const constants_1 = require("./constants");
const enums_1 = require("./enums");
const common_1 = require("./utils/common");
/**
 * Lớp hỗ trợ thanh toán qua VNPay
 * @en VNPay class to support VNPay payment
 * @see https://sandbox.vnpayment.vn/apis/docs/huong-dan-tich-hop/
 *
 * @example
 * import { VNPay } from 'vnpay';
 *
 * const vnpay = new VNPay({
 *     api_Host: 'https://sandbox.vnpayment.vn',
 *     tmnCode: 'TMNCODE',
 *     secureSecret: 'SERCRET',
 *     testMode: true, // optional
 *     hashAlgorithm: 'SHA512', // optional
 *     paymentEndpoint: 'paymentv2/vpcpay.html', // optional
 * });
 *
 * const tnx = '12345678'; // Generate your own transaction code
 * const urlString = vnpay.buildPaymentUrl({
 *     vnp_Amount: 100000,
 *      vnp_IpAddr: '192.168.0.1',
 *      vnp_ReturnUrl: 'http://localhost:8888/order/vnpay_return',
 *      vnp_TxnRef: tnx,
 *      vnp_OrderInfo: `Thanh toan cho ma GD: ${tnx}`,
 * }),
 *
 */
class VNPay {
    constructor(_a) {
        var { vnpayHost = constants_1.VNPAY_GATEWAY_SANDBOX_HOST, vnp_Version = constants_1.VNP_VERSION, vnp_CurrCode = enums_1.VnpCurrCode.VND, vnp_Locale = enums_1.VnpLocale.VN, testMode = false, paymentEndpoint = constants_1.PAYMENT_ENDPOINT } = _a, config = __rest(_a, ["vnpayHost", "vnp_Version", "vnp_CurrCode", "vnp_Locale", "testMode", "paymentEndpoint"]);
        this.HASH_ALGORITHM = 'SHA512';
        this.BUFFER_ENCODE = 'utf-8';
        if (testMode) {
            vnpayHost = constants_1.VNPAY_GATEWAY_SANDBOX_HOST;
        }
        if (config === null || config === void 0 ? void 0 : config.hashAlgorithm) {
            this.HASH_ALGORITHM = config.hashAlgorithm;
        }
        this.globalDefaultConfig = Object.assign({ vnpayHost,
            vnp_Version,
            vnp_CurrCode,
            vnp_Locale, vnp_OrderType: constants_1.ProductCode.Other, vnp_Command: constants_1.VNP_DEFAULT_COMMAND }, config);
    }
    /**
     * Lấy cấu hình mặc định của VNPay
     * @en Get default config of VNPay
     */
    get defaultConfig() {
        return {
            vnp_TmnCode: this.globalDefaultConfig.tmnCode,
            vnp_Version: this.globalDefaultConfig.vnp_Version,
            vnp_CurrCode: this.globalDefaultConfig.vnp_CurrCode,
            vnp_Locale: this.globalDefaultConfig.vnp_Locale,
            vnp_Command: this.globalDefaultConfig.vnp_Command,
            vnp_OrderType: this.globalDefaultConfig.vnp_OrderType,
        };
    }
    getBankList() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch((0, common_1.resolveUrlString)((_a = this.globalDefaultConfig.vnpayHost) !== null && _a !== void 0 ? _a : constants_1.VNPAY_GATEWAY_SANDBOX_HOST, constants_1.GET_BANK_LIST_ENDPOINT), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `tmn_code=${this.globalDefaultConfig.tmnCode}`,
            });
            const bankList = (yield response.json());
            bankList.forEach((b) => {
                var _a;
                return (b.logo_link = (0, common_1.resolveUrlString)((_a = this.globalDefaultConfig.vnpayHost) !== null && _a !== void 0 ? _a : constants_1.VNPAY_GATEWAY_SANDBOX_HOST, b.logo_link.slice(1)));
            });
            return bankList;
        });
    }
    /**
     * Phương thức xây dựng, tạo thành url thanh toán của VNPay
     * @en Build the payment url
     *
     * @param {BuildPaymentUrl} data - Payload that contains the information to build the payment url
     * @returns {string} The payment url string
     * @see https://sandbox.vnpayment.vn/apis/docs/huong-dan-tich-hop/#t%E1%BA%A1o-url-thanh-to%C3%A1n
     */
    buildPaymentUrl(data) {
        var _a, _b, _c;
        const dataToBuild = Object.assign(Object.assign({}, this.defaultConfig), data);
        dataToBuild.vnp_Amount = dataToBuild.vnp_Amount * 100;
        if (!(0, common_1.isValidVnpayDateFormat)((_a = dataToBuild === null || dataToBuild === void 0 ? void 0 : dataToBuild.vnp_CreateDate) !== null && _a !== void 0 ? _a : 0)) {
            const timeGMT7 = (0, moment_timezone_1.default)(new Date()).tz('Asia/Ho_Chi_Minh').format();
            dataToBuild.vnp_CreateDate = (0, common_1.dateFormat)(new Date(timeGMT7), 'yyyyMMddHHmmss');
        }
        const redirectUrl = new URL((0, common_1.resolveUrlString)((_b = this.globalDefaultConfig.vnpayHost) !== null && _b !== void 0 ? _b : constants_1.VNPAY_GATEWAY_SANDBOX_HOST, (_c = this.globalDefaultConfig.paymentEndpoint) !== null && _c !== void 0 ? _c : constants_1.PAYMENT_ENDPOINT));
        Object.entries(dataToBuild)
            .sort(([key1], [key2]) => key1.toString().localeCompare(key2.toString()))
            .forEach(([key, value]) => {
            // Skip empty value
            if (!value || value === '' || value === undefined || value === null) {
                return;
            }
            redirectUrl.searchParams.append(key, value.toString());
        });
        const signed = (0, common_1.hash)(this.globalDefaultConfig.secureSecret, Buffer.from(redirectUrl.search.slice(1).toString(), this.BUFFER_ENCODE), this.HASH_ALGORITHM);
        redirectUrl.searchParams.append('vnp_SecureHash', signed);
        return redirectUrl.toString();
    }
    /**
     * Phương thức xác thực tính đúng đắn của các tham số trả về từ VNPay
     * @en Method to verify the return url from VNPay
     *
     * @param {ReturnQueryFromVNPay} query - The object of data return from VNPay
     * @returns {VerifyReturnUrl} The return object
     * @see https://sandbox.vnpayment.vn/apis/docs/huong-dan-tich-hop/#code-returnurl
     */
    verifyReturnUrl(query) {
        var _a, _b;
        const secureHash = query.vnp_SecureHash;
        // Will be remove when append to URLSearchParams
        delete query.vnp_SecureHash;
        delete query.vnp_SecureHashType;
        const outputResults = {
            isVerified: true,
            isSuccess: query.vnp_ResponseCode === '00',
            message: (0, common_1.getResponseByStatusCode)((_b = (_a = query.vnp_ResponseCode) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '', this.globalDefaultConfig.vnp_Locale),
        };
        const searchParams = new URLSearchParams();
        Object.entries(query)
            .sort(([key1], [key2]) => key1.toString().localeCompare(key2.toString()))
            .forEach(([key, value]) => {
            // Skip empty value
            if (value === '' || value === undefined || value === null) {
                return;
            }
            searchParams.append(key, value.toString());
        });
        const signed = (0, common_1.hash)(this.globalDefaultConfig.secureSecret, Buffer.from(searchParams.toString(), this.BUFFER_ENCODE), this.HASH_ALGORITHM);
        if (secureHash !== signed) {
            Object.assign(outputResults, {
                isVerified: false,
                message: 'Wrong checksum',
            });
        }
        return Object.assign(Object.assign({}, query), outputResults);
    }
    /**
     * Phương thức xác thực tính đúng đắn của lời gọi ipn từ VNPay
     *
     * Sau khi nhận được lời gọi, hệ thống merchant cần xác thực dữ liệu nhận được từ VNPay, kiểm tra đơn hàng có hợp lệ không, kiểm tra số tiền thanh toán có đúng không.
     *
     * Sau đó phản hồi lại VNPay kết quả xác thực thông qua các `IpnResponse`
     *
     * @en Method to verify the ipn url from VNPay
     *
     * After receiving the call, the merchant system needs to verify the data received from VNPay, check if the order is valid, check if the payment amount is correct.
     *
     * Then respond to VNPay the verification result through the `IpnResponse`
     *
     * @param {ReturnQueryFromVNPay} query The object of data return from VNPay
     * @returns {VerifyIpnCall} The return object
     * @see https://sandbox.vnpayment.vn/apis/docs/huong-dan-tich-hop/#code-ipn-url
     */
    verifyIpnCall(query) {
        const result = this.verifyReturnUrl(query);
        return Object.assign(Object.assign({}, result), { vnp_Amount: result.vnp_Amount / 100 });
    }
    /**
     * Đây là API để hệ thống merchant truy vấn kết quả thanh toán của giao dịch tại hệ thống VNPAY.
     * @en This is the API for the merchant system to query the payment result of the transaction at the VNPAY system.
     *
     * @param {QueryDr} query - The data to query
     * @returns {Promise<QueryDrResponseFromVNPay>} The data return from VNPay
     * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#truy-van-ket-qua-thanh-toan-PAY
     */
    queryDr(query) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const command = 'querydr';
            const dataQuery = Object.assign({ vnp_Version: (_a = this.globalDefaultConfig.vnp_Version) !== null && _a !== void 0 ? _a : constants_1.VNP_VERSION }, query);
            const url = new URL((0, common_1.resolveUrlString)((_b = this.globalDefaultConfig.vnpayHost) !== null && _b !== void 0 ? _b : constants_1.VNPAY_GATEWAY_SANDBOX_HOST, constants_1.QUERY_DR_REFUND_ENDPOINT));
            const stringToCheckSum = `${dataQuery.vnp_RequestId}|${dataQuery.vnp_Version}|${command}` +
                `|${this.globalDefaultConfig.tmnCode}|${dataQuery.vnp_TxnRef}|${dataQuery.vnp_TransactionDate}` +
                `|${dataQuery.vnp_CreateDate}|${dataQuery.vnp_IpAddr}|${dataQuery.vnp_OrderInfo}`;
            const signed = (0, common_1.hash)(this.globalDefaultConfig.secureSecret, Buffer.from(stringToCheckSum, this.BUFFER_ENCODE), this.HASH_ALGORITHM);
            const body = Object.assign(Object.assign({}, dataQuery), { vnp_Command: command, vnp_TmnCode: this.globalDefaultConfig.tmnCode, vnp_SecureHash: signed });
            const response = yield fetch(url.toString(), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const responseData = (yield response.json());
            if (Number(responseData.vnp_ResponseCode) >= 90 &&
                Number(responseData.vnp_ResponseCode) <= 99) {
                return Object.assign(Object.assign({}, responseData), { vnp_Message: (0, common_1.getResponseByStatusCode)((_c = responseData.vnp_ResponseCode) === null || _c === void 0 ? void 0 : _c.toString(), this.globalDefaultConfig.vnp_Locale, constants_1.QUERY_DR_RESPONSE_MAP) });
            }
            let stringToCheckSumResponse = `${responseData.vnp_ResponseId}|${responseData.vnp_Command}|${responseData.vnp_ResponseCode}` +
                `|${responseData.vnp_Message}|${this.defaultConfig.vnp_TmnCode}|${responseData.vnp_TxnRef}` +
                `|${responseData.vnp_Amount}|${responseData.vnp_BankCode}|${responseData.vnp_PayDate}` +
                `|${responseData.vnp_TransactionNo}|${responseData.vnp_TransactionType}|${responseData.vnp_TransactionStatus}` +
                `|${responseData.vnp_OrderInfo}|${responseData.vnp_PromotionCode}|${responseData.vnp_PromotionAmount}`;
            stringToCheckSumResponse = stringToCheckSumResponse.replace(/undefined/g, '');
            const signedResponse = (0, common_1.hash)(this.globalDefaultConfig.secureSecret, Buffer.from(stringToCheckSumResponse, this.BUFFER_ENCODE), this.HASH_ALGORITHM);
            if (signedResponse !== responseData.vnp_SecureHash) {
                throw new Error('Wrong checksum from VNPay response');
            }
            return Object.assign(Object.assign({}, responseData), { vnp_Message: (0, common_1.getResponseByStatusCode)((_d = responseData.vnp_ResponseCode) === null || _d === void 0 ? void 0 : _d.toString(), this.globalDefaultConfig.vnp_Locale, constants_1.QUERY_DR_RESPONSE_MAP) });
        });
    }
    refund(data) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const vnp_Command = 'refund';
            const dataQuery = Object.assign(Object.assign({}, data), { vnp_Command, vnp_Version: this.globalDefaultConfig.vnp_Version, vnp_TmnCode: this.globalDefaultConfig.tmnCode });
            const url = new URL((0, common_1.resolveUrlString)((_a = this.globalDefaultConfig.vnpayHost) !== null && _a !== void 0 ? _a : constants_1.VNPAY_GATEWAY_SANDBOX_HOST, constants_1.QUERY_DR_REFUND_ENDPOINT));
            const stringToSigned = `${dataQuery.vnp_RequestId}|${dataQuery.vnp_Version}|${vnp_Command}|${dataQuery.vnp_TmnCode}|` +
                `${dataQuery.vnp_TransactionType}|${dataQuery.vnp_TxnRef}|${dataQuery.vnp_Amount}|` +
                `${dataQuery.vnp_TransactionNo}|${dataQuery.vnp_TransactionDate}|${dataQuery.vnp_CreateBy}|` +
                `${dataQuery.vnp_CreateDate}|${dataQuery.vnp_IpAddr}|${dataQuery.vnp_OrderInfo}`;
            const signed = (0, common_1.hash)(this.globalDefaultConfig.secureSecret, Buffer.from(stringToSigned, this.BUFFER_ENCODE), this.HASH_ALGORITHM);
            const body = Object.assign(Object.assign({}, dataQuery), { vnp_SecureHash: signed });
            const response = yield fetch(url.toString(), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const responseData = (yield response.json());
            if (Number(responseData.vnp_ResponseCode) >= 90 &&
                Number(responseData.vnp_ResponseCode) <= 99) {
                return Object.assign(Object.assign({}, responseData), { vnp_Message: (0, common_1.getResponseByStatusCode)((_b = responseData.vnp_ResponseCode) === null || _b === void 0 ? void 0 : _b.toString(), this.globalDefaultConfig.vnp_Locale, constants_1.QUERY_DR_RESPONSE_MAP) });
            }
            const stringToChecksumResponse = `${responseData.vnp_ResponseId}|${vnp_Command}|${responseData.vnp_ResponseCode}|` +
                `${responseData.vnp_Message}|${responseData.vnp_TmnCode}|${responseData.vnp_TxnRef}|` +
                `${responseData.vnp_Amount}|${responseData.vnp_BankCode}|${responseData.vnp_PayDate}|` +
                `${responseData.vnp_TransactionNo}|${responseData.vnp_TransactionType}|` +
                `${responseData.vnp_TransactionStatus}|${responseData.vnp_OrderInfo}`;
            const signedResponse = (0, common_1.hash)(this.globalDefaultConfig.secureSecret, Buffer.from(stringToChecksumResponse, this.BUFFER_ENCODE), this.HASH_ALGORITHM);
            if (signedResponse !== responseData.vnp_SecureHash) {
                throw new Error('Wrong checksum from VNPay response');
            }
            return Object.assign(Object.assign({}, responseData), { vnp_Message: (0, common_1.getResponseByStatusCode)((_c = responseData.vnp_ResponseCode) === null || _c === void 0 ? void 0 : _c.toString(), this.globalDefaultConfig.vnp_Locale, constants_1.REFUND_RESPONSE_MAP) });
        });
    }
}
exports.VNPay = VNPay;
